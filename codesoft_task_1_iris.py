# -*- coding: utf-8 -*-
"""CodeSoft Task 1 IRIS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RZ59LUMia3901WtFg69u82YMioBtmUDx
"""

import pandas as pd
df=pd.read_csv('https://raw.githubusercontent.com/amankharwal/Website-data/master/IRIS.csv')
df

type(df)

df.info()

df.shape

df.size

df.head()

df.tail()

df.groupby('species').size()

spl=df['sepal_length']
spl

spd=df['sepal_width']
spd

spl=df['sepal_length'].unique()
spl

a=df['species'].unique()
a

c=df['sepal_width'].unique()
c

b=df.groupby('species',sort=False).size()
b

import matplotlib.pyplot as plt
plt.bar(a,b,color=['red','orange','pink'])

print("Target Labels", df["species"].unique())

import plotly.graph_objects as go


fig = go.Figure(data=[go.Bar(x=a, y=c,
                             hovertext=[f'Value: {value}' for value in c])])

fig.update_layout(
                  xaxis_title='Categories',
                  yaxis_title='Values')

# Show the interactive plot
fig.show()

import plotly.express as px
fig = px.scatter(df, x="sepal_width", y="sepal_length", color="species")
fig.show()

print(df.groupby(['sepal_width'])['sepal_length'].count())
df.groupby(['sepal_width'])['sepal_length'].count().plot(kind="bar")
plt.show()

"""From the Above Bar Chart we can Understand and Analyze that the highest Sepal Length is for sepal width  3 with the Sepal Length of 26"""

x = df.drop("species", axis=1)
y = df["species"]

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2,random_state=0)

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(x_train, y_train)

import numpy as np

x_new = np.array([[5, 2.9, 1, 0.2]])
prediction = knn.predict(x_new)
print("Prediction: {}".format(prediction))

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_extraction.text import CountVectorizer


tfvect = TfidfVectorizer(stop_words='english',max_df=0.7)
tfid_x_train = tfvect.fit_transform(x_train)
tfid_x_test = tfvect.transform(x_test)
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2, random_state=42)
model = MultinomialNB()
model.fit(xtrain, ytrain)
print(model.score(xtest, ytest))

"""Therefore Here, We get a Accuracy of our model to be 0.9 or 90% which is very good"""

